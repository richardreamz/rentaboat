using Microsoft.VisualBasic;
using nce.scripting;
using nce.adosql;
using BoatRenting.clsUpload;
using BoatRenting.clsField;
using BoatRenting.clsProgress;
using System;
using System.Web;
using System.Web.SessionState;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
namespace BoatRenting {

  public partial class clsUpload_aspx_cs : System.Web.UI.Page
  {
    public const bool FileSystemObjectEnabled = false;
    //If your ISP does not allow the File System Object to
    //be used, then set this value to false.  Some features
    //will be disabled such as verifying folders exist,
    //Assigning unique names to files, displaying progress,
    //and interacting with existing files (Move, Copy, Delete,
    //Rename)
    public const int BufferSize = 0x10000;
    //Changing buffer size may change the length of time
    //it takes to upload a file.  You may want to begin
    //with 64KB and go from there to find the optimal
    //number for your website.
    //Since the Progress Information class writes to
    //a file each itteration, this can degrade performance
    //a lot when using small buffers.
    //Do not go below 100 bytes, or you will begin to risk
    //not being able to parse boundaries.  Data may not upload
    //properly.
    //For your reference:
    //1 KB		1024		&H400
    //2 KB		2048		&H800
    //4 KB		4096		&H1000
    //8 KB		8192		&H2000
    //16 KB		16384		&H4000
    //32 KB		32768		&H8000
    //64 KB		65536		&H10000
    //128 KB	131072		&H20000
    //256 KB	262144		&H40000
    //------------------------------------------------------------------------------
    //Author:		Lewis Moten
    //Email:		Lewis@Moten.com
    //URL:		http://www.lewismoten.com
    //Date:		September 1, 2003
    //------------------------------------------------------------------------------
    //Upload class retrieves multi-part form data posted to web page
    //and parses it into objects that are easy to interface with.
    //Requires MDAC (ADODB) COM components found on most servers today
    //Additional compenents are not necessary.
    //
    //Demo:
    //Set objUpload = new clsUpload
    //Initializes object and parses all posted multi-part from data.
    //Once this as been done, Access to the Request object is restricted
    //
    //objUpload.Count
    //Number of fields retrieved
    //
    //use: Response.Write "There are " & objUpload.Count & " fields."
    //
    //objUpload.Fields
    //Access to field objects.  This is the default propert so it does
    //not necessarily have to be specified.  You can also determine if
    //you wish to specify the field index, or the field name.
    //
    //Use:
    //Set objField = objUpload.Fields("File1")
    //Set objField = objUpload("File1")
    //Set objField = objUpload.Fields(0)
    //Set objField = objUpload(0)
    //Response.Write objUpload("File1").Name
    //Response.Write objUpload(0).Name
    //
    //------------------------------------------------------------------------------
    //
    //List of all fields passed:
    //
    //For i = 0 To objUpload.Count - 1
    //Response.Write objUpload(i).Name & "<BR>"
    //Next
    //
    //------------------------------------------------------------------------------
    //
    //HTML needed to post multipart/form-data
    //
    //<FORM method="post" encType="multipart/form-data" action="Upload.aspx">
    //<INPUT type="File" name="File1">
    //<INPUT type="Submit" value="Upload">
    //</FORM>
    //------------------------------------------------------------------------------
    //
    //Customized Errors:
    //(vbObjectError + ##)
    //
    //1:  Object does not exist within the ordinal reference.
    //2:  Failed to save file ... common reasons
    //3:  Failed to parse posted binary data delimiter
    //4:  Failed to save file ... unknown
    //5:  Used Request.Form ... Failed to read posted form data
    //6:  Failed to read posted form data for unknown reason.
    //7:  Folder does not exist.
    //8:  Filename is not valid
    //9:  Folder is not valid
    //10: ADODB.Version below 2.5
    //11: Not enough free space available.
    //12: File System Object has been disabled.
    //13: multipart/form-data was not received.
    //------------------------------------------------------------------------------
    //
    public object gBinaryData = null;

  }

} 
